import streamlit as st

# from streamlit_card import card as st_card
import pandas as pd
import pickle
import time


from app_utils.page_view import format_style
from actions import (
    run_calibration,
    display_calibration,
    run_fairness,
    display_fairness,
    run_attribution,
    display_attribution,
    run_simpler_model,
    display_simpler_model,
)

st.set_page_config(
    page_title="Unlayer AI - diagnostic demo",
    page_icon="favicon.ico",
    # layout="wide",
)
format_style()

css = """
.uploadedFiles {
    display: none;
}
"""

st.markdown(f"<style>{css}</style>", unsafe_allow_html=True)
st.markdown(
    """
<h1 class="logo pulse">
    <span class="gradient-text">Unlayer</span> <span class="text-white">AI</span>
    <span class="text-white" style="font-size: 2rem;">- diagnostic demo</span>
</h1> 
""",
    unsafe_allow_html=True,
)

init_description = st.caption(
    """This demo runs explainable AI checks on a binary classification model and dataset,
expecting a label with values `1` for positive class and `0` for negative class.

You are free to upload a sklearn-compatible binary classifier and development dataset of your choice,
or use a pre-loaded demo model and dataset.
The demo model and dataset are taken from
<a target="_blank"
    href="https://colab.research.google.com/drive/1x7xN5iMd3BHJOyxe64QfRYUN_-VtVuJs?usp=sharing">
    this colab</a>,
which you can browse to understand how a compatible model and dataset should be structured.
""",
    unsafe_allow_html=True,
)


btn_accept_disclaimer = None
if (
    not hasattr(st.session_state, "disclaimer_accepted")
    or not st.session_state.disclaimer_accepted
):
    disclaimer_container = st.container(border=True)
    with disclaimer_container:
        st.markdown(
            """\
### DISCLAIMER
This demo is provided <strong>for educational and informational purposes only</strong>. It is not intended to serve as legal, ethical, or professional advice, and should <strong>not be relied upon</strong> for making decisions of any kind, including those related to fairness, compliance, or deployment of machine learning models.
All outputs, analyses, and recommendations generated by this tool are provided <strong>"as is"</strong> with <strong>no warranties</strong>, express or implied, regarding accuracy, completeness, performance, or fitness for any particular purpose.
By using this tool, you acknowledge and agree that: 
You are solely responsible for evaluating the results and for any actions you take based on them;
You will <strong>not upload any confidential, sensitive, or personally identifiable information</strong>;
While any models, datasets, API keys, or other information you submit are stored for demonstrative purposes only, you acknowledge that uploading them is <strong>at your own risk</strong>;
The developers and contributors of this tool are <strong>not liable</strong> for any damages or losses, direct or indirect, arising from the use of this software.
<br>
For transparency, this project is open source. You may review the source code at:
<a href="https://github.com/unlayer-ai/streamlit-diagnostic-demo/" target="_blank">GitHub Repository</a>
""",
            unsafe_allow_html=True,
        )
        _, col = st.columns([4, 3])
        with col:
            btn_accept_disclaimer = st.button(
                "I read the disclaimer and wish to proceed"
            )
    

if btn_accept_disclaimer:
    st.session_state.disclaimer_accepted = True
    disclaimer_container.empty()
    st.rerun()

footer = """<style>
.footer {
    position: fixed;
    left: 0;
    bottom: 0;
    width: 100%;
    background-color: black;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}
</style>
<div class="footer">
<!-- gray colored text, centered, some margin top -->
<p style="color: gray; text-align: center; margin-top: 1rem; font-size: 0.8rem;">
¬© 2025 Unlayer AI. All rights reserved.
</p>
</div>
"""
st.markdown(footer, unsafe_allow_html=True)


def run_app():

    model_uploader = st.empty()
    data_uploader = st.empty()
    df_header_placeholder = st.empty()
    df_placeholder = st.empty()
    var_to_predict_placeholder = st.empty()
    target_class_placeholder = st.empty()
    llm_option_expander = st.empty()

    col1, col2 = st.columns([4, 2])

    with col2:
        use_demo_model_n_data_placeholder = st.empty()
        btn_diagnose = None
        btn_diagnose_placeholder = st.empty()

    uploaded_model = model_uploader.file_uploader(
        "1Ô∏è‚É£ Upload a trained scikit-learn compatible binary classifier", type=["pkl"]
    )
    uploaded_data = data_uploader.file_uploader(
        "2Ô∏è‚É£ Upload a compatible binary classification development set", type=["csv"]
    )

    use_demo_model_n_data = use_demo_model_n_data_placeholder.button(
        "or use a demo model & dataset", use_container_width=True
    )

    if (
        (uploaded_model and uploaded_data)
        or (hasattr(st.session_state, "model") and hasattr(st.session_state, "df"))
        or use_demo_model_n_data
    ):
        if use_demo_model_n_data:
            with open("demo_data/model.pkl", "rb") as model:
                uploaded_model = pickle.load(model)
            uploaded_data = pd.read_csv("demo_data/dev.csv")
        else:
            if hasattr(st.session_state, "model"):
                uploaded_model = st.session_state.model
            if not hasattr(st.session_state, "model"):
                uploaded_model = pickle.load(uploaded_model)
            if hasattr(st.session_state, "df"):
                uploaded_data = st.session_state.df
            else:
                uploaded_data = pd.read_csv(uploaded_data)

        # check the model is OK
        if not hasattr(uploaded_model, "predict"):
            st.error(
                "The uploaded model has no `predict` function.\n"
                + "Please upload a compatible model."
            )
            uploaded_model = None

        elif not hasattr(uploaded_model, "predict_proba"):
            st.error(
                "The uploaded model has no `predict_proba` function.\n"
                + "Please upload a compatible model."
            )
            uploaded_model = None

        # store in session state
        st.session_state.model = uploaded_model
        st.session_state.df = uploaded_data

        # hide controls
        init_description.empty()
        model_uploader.empty()
        data_uploader.empty()
        use_demo_model_n_data_placeholder.empty()

        # show
        df_header_placeholder.caption(
            f"""
                You uploaded a *<span class="text-white">{st.session_state.model.__class__.__name__}</span>*
                to be evaluated on this dataset (first 5 rows preview):
        """,
            unsafe_allow_html=True,
        )
        df_placeholder.write(st.session_state.df.head(5))

        def set_desirable_class():
            values = sorted(
                st.session_state.df[st.session_state.target_variable].unique()
            )
            st.session_state.target_class = int(values[-1])
            print(
                f"desirable class for {st.session_state.target_variable} is {st.session_state.target_class}"
            )

        # get the variable to predict
        st.session_state.target_variable = str(
            st.session_state.df.columns[len(st.session_state.df.columns) - 1]
        )
        set_desirable_class()
        st.session_state.target_variable = var_to_predict_placeholder.selectbox(
            "3Ô∏è‚É£ Select the variable to predict (binary class expected, with 1=desirable, 0=undesirable):",
            st.session_state.df.columns,
            index=len(st.session_state.df.columns) - 1,
            on_change=set_desirable_class,
        )

        expander = llm_option_expander.expander(
            "4Ô∏è‚É£ Set up an LLM for advanced diagnostics",
            expanded=st.session_state.get("llm_option_expander", False),
        )
        with expander:
            st.caption("""\
‚ö†Ô∏è Use a budget-limited API to prevent excessive costs from unforeseen usage \
or cybertheft. The app uses `st.session_state` to store the API key during the \
analysis and then deletes it afterwards. If you have better ideas for securing \
the API key, please let us know at [hi@unlayer.ai](mailto:hi@unlayer.ai).
""")
            st.session_state.llm_option_expander = True
            st.session_state.llm_api_key = st.text_input(
                "LLM API key (e.g., OpenAI API key)",
                placeholder="sk-...",
                type="password",
            )
            st.session_state.llm_model = st.text_input(
                "LLM model name",
                placeholder="gpt-4o",
            )

        with col2:
            btn_diagnose = btn_diagnose_placeholder.button("ü©∫ Diagnose")

    # if model is uploaded and btn "diagnose" is clicked
    def run_diagnostic(
        data_uploader,
        df_header_placeholder,
        df_placeholder,
        var_to_predict_placeholder,
        btn_diagnose_placeholder,
    ):
        st.toast("Diagnosis started", icon="ü©∫")
        # if not st.session_state.df or not st.session_state.model:
        #    st.error("Please upload a dataset and a model")
        #    st.stop()
        data_uploader.empty()
        df_header_placeholder.empty()
        df_placeholder.empty()
        var_to_predict_placeholder.empty()
        llm_option_expander.empty()
        btn_diagnose_placeholder.empty()

        ATTRIBUTION_SUBSAMPLE = 20

        # placeholder
        with st.spinner("Considering calibration..."):
            time.sleep(2)
            calibration_result = run_calibration()
        with st.spinner("Running fairness checks (~a few seconds)..."):
            fairness_result = run_fairness()
        with st.spinner("Estimating feature attribution (~a dozen seconds)..."):
            attribution_result = run_attribution(subsample_no=ATTRIBUTION_SUBSAMPLE)
        with st.spinner("Attempting simpler modeling (~a few minutes)..."):
            simpler_model_result = run_simpler_model()
            
        # clear API key for additional security
        if "llm_api_key" in st.session_state:
            del st.session_state["llm_api_key"]

        calib_col, fair_col, attr_col, surr_col = st.columns([1, 1, 1, 1])
        calib_tab, fair_tab, attr_tab, surr_tab, contact_tab = st.tabs(
            ["Calibration", "Fairness", "Attribution", "Simpler modeling", "Contact us"]
        )

        display_calibration(calib_col, calib_tab, calibration_result)
        display_fairness(fair_col, fair_tab, fairness_result)
        display_attribution(
            attr_col, attr_tab, attribution_result, subsample_no=ATTRIBUTION_SUBSAMPLE
        )
        display_simpler_model(surr_col, surr_tab, simpler_model_result)

        contact_tab.markdown(
            """\
    Looking to build AI that your team and stakeholders can trust?
    We‚Äôre here to help you across a wide range of challenges:

    #### Transparency & Fairness
    - üîç Enhance transparency with interpretable models and feature attribution
    - ‚öñÔ∏è Increase fairness through bias detection and mitigation strategies

    ### Actionability & Reliability
    - üîÑ Provide recourse via counterfactual explanations that suggest actionable alternatives 
    - ‚öôÔ∏è Improve robustness using adversarial training methods

    ### Causality & Privacy
    - üß© Estimate cause‚Äìeffect relationships with causal inference and propensity scoring  
    - üîí Increase privacy with synthetic data generation

    ### Compliance & Research
    - üìë Answer regulatory questions with clear documentation and compliance checks
    - ‚úçÔ∏è Support research with expert guidance and collaboration

    [Get in touch](https://unlayer.ai/#contact) to explore how we can help \
    you turn responsible AI principles into systems that are transparent, reliable, and trusted.
    """
        )

    if btn_diagnose:
        # check that the class is OK
        class_values = sorted(
            st.session_state.df[st.session_state.target_variable].unique()
        )
        if len(class_values) != 2:
            st.error(
                f"Target {st.session_state.target_variable} is not binary (0-1). \
                This demo works only with binary labels."
            )
        else:
            run_diagnostic(
                data_uploader,
                df_header_placeholder,
                df_placeholder,
                var_to_predict_placeholder,
                btn_diagnose_placeholder,
            )


if (
    hasattr(st.session_state, "disclaimer_accepted")
    and st.session_state.disclaimer_accepted
):
    run_app()
